import _ from 'lodash';
import {toUpperUnderscore} from './utilities';

function _generateActionTypes(hubName, methods, server) {
  const hubUpper = toUpperUnderscore(hubName);
  return methods.map(x => {
    const upper = toUpperUnderscore(x.Name);
    if(server) {
      return [
        `export const ${upper}_REQUEST = '${hubUpper}::${upper}_REQUEST';`,
        `export const ${upper}_RESPONSE = '${hubUpper}::${upper}_RESPONSE';`,
        `export const ${upper}_ERROR = '${hubUpper}::${upper}_ERROR';`
      ].join('\r\n');
    } else {
      return `export const ${upper} = '${hubUpper}::${upper}';`;
    }
  }).join('\r\n');
}

function _generateMethodComments(method) {
  return [`/**`,
    `* ${method.Comment.Summary || 'No summary defined.'}`,
    ...method.Arguments.map(arg => `* @params {${arg.Type}} ${arg.Name} ${method.Comment.Arguments[arg.Name] || 'No argument comment defined.'}`),
    `*/`].join('\r\n');
}

function _generateActionCreators(methods, server) {
  return methods.map(x => {
    const upperType = toUpperUnderscore(x.Name);
    const camelAction = _.camelCase(upperType);
    const args = x.Arguments.map(y => y.Name).join(', ');
    const sep = (args.length ? ', ' : '');
    if(server) {
      return [
        `/**`,
        `* ${x.Comment.Summary || 'No summary defined.'}`,
        `${x.Arguments.map(arg => `* params {${arg.Type}} ${arg.Name} ${x.Comment.Arguments[arg.Name] || `No argument comment defined`}`)}`,
        `*/`,
        `export function ${camelAction}Request(${args}){`,
        `  return {type: ${upperType}_REQUEST${sep}${args}};`,
        `}`,
        `/**`,
        `* ${x.Comment.Summary || 'No summary defined.'}`,
        `*/`,
        `export function ${camelAction}Response(response){`,
        `  return {type: ${upperType}_RESPONSE, response};`,
        `}`,
        `/**`,
        `* ${x.Comment.Summary || 'No summary defined.'}`,
        `*/`,
        `export function ${camelAction}Error(error){`,
        `  return {type: ${upperType}_ERROR, error};`,
        `}`,
        `${_generateMethodComments(x)}`,
        `export function ${camelAction}(${args}){`,
        `  return (dispatch) => {`,
        `    const bound = {`,
        `      ${camelAction}Request: (${args}) => dispatch(${camelAction}Request(${args})),`,
        `      ${camelAction}Response: (response) => dispatch(${camelAction}Response(response)),`,
        `      ${camelAction}Error: (error) => dispatch(${camelAction}Error(error))`,
        `    };`,
        `    bound.${camelAction}Request(${args});`,
        `    server.${camelAction}(${args})`,
        `      .then(bound.${camelAction}Response)`,
        `      .fail(bound.${camelAction}Error);`,
        `  };`,
        `}`
      ].join('\r\n');
    } else {
      return [
        `${_generateMethodComments(x)}`,
        `export function ${camelAction}(${args}){`,
        `  return {type: ${upperType}${sep}${args}};`,
        `}`
      ].join('\r\n');
    }
  }).join('\r\n');
}

function _generateSelfRegistration(hub) {
  const camelHub = _.camelCase(hub.Name);
  const assignments = hub.Client.map(x => {
    const camelAction = _.camelCase(x.Name);
    const args = x.Arguments.map(y => y.Name).join(', ');
    return `  client.${camelAction} = (${args}) => dispatch(${camelAction}(${args}));`;
  }).join('\r\n');
  return [
    `export function ${camelHub}(dispatch) {`,
    assignments,
    `}`
  ].join('\r\n');
}


const _generateClientActionTypes = hub => _generateActionTypes(hub.Name, hub.Client, false);
const _generateServerActionTypes = hub => _generateActionTypes(hub.Name, hub.Server, true);
const _generateClientActionCreators = hub => _generateActionCreators(hub.Client, false);
const _generateServerActionCreators = hub => _generateActionCreators(hub.Server, true);

export default function(hub) {
  return [
    `/** Start ${hub.Name} **/`,
    `// Generated by the signal-arr Redux Classic (jQuery based) proxy generator.`,
    `let {server, client} = $.connection.${_.camelCase(hub.Name)};`,
    '',
    `// Action Types (Client)`,
    `${_generateClientActionTypes(hub)}`,
    '',
    `// Action Types (Server)`,
    `${_generateServerActionTypes(hub)}`,
    '',
    `// Action Creators (Client)`,
    `${_generateClientActionCreators(hub)}`,
    '',
    `// Action Creators (Server)`,
    `${_generateServerActionCreators(hub)}`,
    '',
    `// Self Registration`,
    `${_generateSelfRegistration(hub)}`,
    '',
    `/** End ${hub.Name} **/`,
    ''
  ].join('\r\n');
}