{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;oBAAiB,MAAM;;;;0BACA,YAAY;;;;qBACjB,OAAO;;;;yBACH,aAAa;;;;AAEnC,IAAI,IAAI,GAAG,mBACR,KAAK,CAAC,0CAA0C,CAAC,CACjD,OAAO,CAAC,MAAM,EAAE,yEAAyE,CAAC,CAC1F,OAAO,CAAC,MAAM,EAAE,iEAAiE,CAAC,CAClF,OAAO,CAAC,MAAM,EAAE,mFAAmF,EAAE,UAAA,CAAC;SACrG,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE;AACZ,SAAK,EAAE,UAAU;AACjB,UAAM,EAAE,IAAI;AACZ,eAAS,OAAO;AAChB,YAAQ,EAAE,uDAAuD;AACjE,QAAI,EAAE,QAAQ;GACf,CAAC;CAAA,CAAC,CACJ,MAAM,CAAC,CAAC,EAAE,8IAA8I,CAAC,CACzJ,MAAM,CAAC,GAAG,EAAE;AACX,OAAK,EAAE,aAAa;AACpB,QAAM,EAAE,KAAK;AACb,UAAQ,EAAE,uCAAuC;AACjD,MAAI,EAAE,QAAQ;CACf,CAAC,CACD,MAAM,CAAC,GAAG,EAAE;AACX,OAAK,EAAE,YAAY;AACnB,QAAM,EAAE,KAAK;AACb,UAAQ,EAAE,2GAA2G;AACrH,MAAI,EAAE,QAAQ;CACf,CAAC,CACD,MAAM,CAAC,GAAG,EAAE;AACX,OAAK,EAAE,gBAAgB;AACvB,QAAM,EAAE,KAAK;AACb,UAAQ,EAAE,gDAAgD;AAC1D,MAAI,EAAE,QAAQ;AACd,OAAK,EAAE,8BAA8B;CACtC,CAAC,CACD,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CACjB,MAAM,CAAC,GAAG,EAAE;AACX,OAAK,EAAE,oBAAoB;AAC3B,QAAM,EAAE,KAAK;AACb,aAAS,UAAU;AACnB,UAAQ,EAAE,4CAA4C;AACtD,MAAI,EAAE,QAAQ;AACd,OAAK,EAAE,8BAA8B;CACtC,CAAC,CACD,MAAM,CAAC,GAAG,EAAE;AACX,OAAK,EAAE,gBAAgB;AACvB,QAAM,EAAE,KAAK;AACb,aAAS,IAAI;AACb,UAAQ,EAAE,sCAAsC;AAChD,MAAI,EAAE,QAAQ;AACd,OAAK,EAAE,8BAA8B;CACtC,CAAC,CACD,IAAI,CAAC,MAAM,CAAC,CACZ,MAAM,CAAC,mEAAmE,CAAC,CAC3E,MAAM,CAAC,QAAQ,CAAC,CAChB,IAAI,CAAC,mBAAM,aAAa,EAAE,CAAC,CAC3B,IAAI,CAAC;;AAER,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE1B,4BAAU,IAAI,CAAC,CAAC","file":"cli.js","sourcesContent":["import path from 'path';\nimport prettyjson from 'prettyjson';\nimport yargs from 'yargs';\nimport processor from './processor';\n\nlet argv = yargs\n  .usage('Usage: $0 <command> <assembly> [options]')\n  .command('scan', 'scans the specified .NET assembly and prints the results to the console')\n  .command('json', 'generate a JSON file that describes the specified .NET assembly')\n  .command('code', 'generate a javascript source code file that describes the specified .NET assembly', y =>\n    y.option('t', {\n      alias: 'template',\n      demand: true,\n      default: 'redux',\n      describe: 'the template to use to generate the source code files',\n      type: 'string'\n    }))\n  .demand(2, 'Missing required argument(s). Specify a command to execute (scan, json, code) followed by the assembly to scan (/path/to/compiled/assembly).')\n  .option('f', {\n    alias: 'output-file',\n    demand: false,\n    describe: 'Specify a file to stream the output. ',\n    type: 'string'\n  })\n  .option('d', {\n    alias: 'output-dir',\n    demand: false,\n    describe: 'Specify directory to stream the output. Separate files will be created/updated for each proxy generated. ',\n    type: 'string'\n  })\n  .option('h', {\n    alias: 'hub-client-url',\n    demand: false,\n    describe: 'Also generate a hub client with the given url.',\n    type: 'string',\n    group: 'Me Code Generation Options: '\n  })\n  .implies('h', 'd')\n  .option('p', {\n    alias: 'path-to-hub-client',\n    demand: false,\n    default: './Client',\n    describe: 'The relative path to the hub client module',\n    type: 'string',\n    group: 'Me Code Generation Options: '\n  })\n  .option('c', {\n    alias: 'hub-client-var',\n    demand: false,\n    default: '$0',\n    describe: 'The name of the exported mumbo jumbo',\n    type: 'string',\n    group: 'Me Code Generation Options: '\n  })\n  .help('help')\n  .epilog('For more information, go to https://github.com/RoviSys/signal-arr')\n  .locale('pirate')\n  .wrap(yargs.terminalWidth())\n  .argv;\n\nargv.command = argv._[0];\nargv.assembly = argv._[1];\n\nprocessor(argv);"]}