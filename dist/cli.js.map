{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["import path from 'path';\r\nimport Font from 'cfonts';\r\nimport prettyjson from 'prettyjson';\r\nimport yargs from 'yargs';\r\nimport {writeFile} from './utilities';\r\nimport {scan} from './HubScanner';\r\n\r\nlet argv = yargs\r\n  .usage('Usage: $0 <command> <assembly> [options]')\r\n  .command('scan', 'scans the specified .NET assembly and prints the results to the console')\r\n  .command('json', 'generate a JSON file that describes the specified .NET assembly')\r\n  .command('code', 'generate a javascript source code file that describes the specified .NET assembly', y =>\r\n    y.option('t', {\r\n      alias: 'template',\r\n      demand: true,\r\n      default: 'redux',\r\n      describe: 'the template to use to generate the source code files',\r\n      type: 'string'\r\n    }))\r\n  .demand(2, 'Missing required argument(s). Specify a command to execute (scan, json, code) followed by the assembly to scan (/path/to/compiled/assembly).')\r\n  .option('f', {\r\n    alias: 'output-file',\r\n    demand: false,\r\n    describe: 'Specify a file to stream the output. ',\r\n    type: 'string'\r\n  })\r\n  .option('d', {\r\n    alias: 'output-dir',\r\n    demand: false,\r\n    describe: 'Specify directory to stream the output. Separate files will be created/updated for each proxy generated. ',\r\n    type: 'string'\r\n  })\r\n  .help('help')\r\n  .epilog('For more information, go to https://github.com/RoviSys/signal-arr')\r\n  .locale('pirate')\r\n  .wrap(yargs.terminalWidth())\r\n  .argv;\r\n\r\n//console.dir(argv);\r\n\r\nconst command = argv._[0];\r\nconst assembly = argv._[1];\r\n\r\nlet promise = scan(assembly);\r\nswitch(command) {\r\n  case 'scan':\r\n    promise = promise\r\n      .then(result => argv.f ? prettyjson.render(result) : result.map(x => Object.assign(x, { r: prettyjson.render(x)})));\r\n    break;\r\n  case 'json':\r\n    promise = promise\r\n      .then(result => argv.f ? JSON.stringify(result, null, 2) : result.map(x => Object.assign(x, { r: JSON.stringify(x, null, 2)})));\r\n    break;\r\n  case 'code':\r\n    switch(argv.t) {\r\n      case 'redux-classic':\r\n        const reduxClassic = require('./ReduxClassicTemplate');\r\n        promise = promise\r\n          .then(result => {\r\n            let templatized = result.map(x => Object.assign(x, { r: reduxClassic(x)}));\r\n            return argv.f\r\n              ? templatized.map(y => y.r).join('\\r\\n')\r\n              : templatized;\r\n          });\r\n        break;\r\n      case 'redux':\r\n        const redux = require('./ReduxTemplate');\r\n        promise = promise\r\n          .then(result => {\r\n            let templatized = result.map(x => Object.assign(x, { r: redux(x)}));\r\n            return argv.f\r\n              ? templatized.map(y => y.r).join('\\r\\n')\r\n              : templatized;\r\n          });\r\n        break;\r\n    }\r\n    break;\r\n}\r\n\r\nif(argv.f) {\r\n  promise = promise\r\n    .then(result => writeFile(command, path.normalize(argv.f), result));\r\n} else if(argv.d) {\r\n  const ext =command === 'json' ? '.json' : '.js';\r\n  promise = promise\r\n    .then(results => Promise.all(results.map(x => writeFile(command, argv.d + x.Name + ext, x.r))));\r\n} else {\r\n  promise = promise\r\n    .then(results => {\r\n      results.forEach(x => x.r.split('\\r\\n').forEach(y => console.log(y)));\r\n      return results;\r\n    });\r\n}\r\n\r\npromise\r\n  .catch(console.error);\r\n\r\n//\r\n//if(argv.json) {\r\n//  scan(argv.a)\r\n//    .then(result => console.log(JSON.stringify(result)))\r\n//    .catch(console.error);\r\n//} else {\r\n//  scan(argv.a)\r\n//    .then(result => console.log(prettyjson.render(result)))\r\n//    .catch(console.error);\r\n//\r\n//\r\n//  var fonts = new Font({\r\n//    'text': 'signal-arr', //text to be converted\r\n//    'font': 'block', //define the font face\r\n//    'colors': '', //define all colors\r\n//    'background': 'Black', //define the background color\r\n//    'letterSpacing': 1, //define letter spacing\r\n//    'space': true, //define if the output text should have empty lines on top and on the bottom\r\n//    'maxLength': '10' //define how many character can be on one line\r\n//  });\r\n//}\r\n"]}