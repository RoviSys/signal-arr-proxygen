{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;sBAAiB,QAAQ;;;;0BACF,YAAY;;;;qBACjB,OAAO;;;;0BACN,cAAc;;AAIjC,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CACxB,KAAK,CAAC,+BAA+B,CAAC,CACtC,OAAO,CAAC,+BAA+B,EAAE,0CAA0C,CAAC,CACpF,MAAM,CAAC,GAAG,CAAC,CACX,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CACtB,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CACb,QAAQ,CAAC,GAAG,EAAE,qBAAqB,CAAC,CACpC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAClB,QAAQ,CAAC,GAAG,EAAE,mEAAmE,CAAC,CAClF,IAAI,CAAC,GAAG,CAAC,CACT,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAClB,MAAM,CAAC,gBAAgB,CAAC,CACxB,IAAI,CAAC;;AAER,IAAG,IAAI,CAAC,IAAI,EAAE;AACZ,wBAAK,IAAI,CAAC,CAAC,CAAC,CACT,IAAI,CAAC,UAAA,MAAM;WAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;GAAA,CAAC,CAAC;CACxD,MAAM;AACL,wBAAK,IAAI,CAAC,CAAC,CAAC,CACT,IAAI,CAAC,UAAA,MAAM;WAAI,OAAO,CAAC,GAAG,CAAC,wBAAW,MAAM,CAAC,MAAM,CAAC,CAAC;GAAA,CAAC,CAAC;;AAG1D,MAAI,KAAK,GAAG,wBAAS;AACnB,UAAM,EAAE,YAAY;AACpB,UAAM,EAAE,OAAO;AACf,YAAQ,EAAE,EAAE;AACZ,gBAAY,EAAE,OAAO;AACrB,mBAAe,EAAE,CAAC;AAClB,WAAO,EAAE,IAAI;AACb,eAAW,EAAE,IAAI;GAClB,CAAC,CAAC;CACJ","file":"cli.js","sourcesContent":["import Font from 'cfonts';\r\nimport prettyjson from 'prettyjson';\r\nimport yargs from 'yargs';\r\nimport {scan} from './HubScanner';\r\n\r\n\r\n\r\nvar argv = require('yargs')\r\n  .usage('Usage: $0 <command> [options]')\r\n  .example('$0 -a ./bin/Debug/Website.dll', 'scan the given assembly for SignalR Hubs')\r\n  .demand('a')\r\n  .alias('a', 'assembly')\r\n  .nargs('a', 1)\r\n  .describe('a', 'Assembly to reflect')\r\n  .alias('j', 'json')\r\n  .describe('j', 'Set the output to a JSON object describing the reflected assembly')\r\n  .help('h')\r\n  .alias('h', 'help')\r\n  .epilog('copyright 2015')\r\n  .argv;\r\n\r\nif(argv.json) {\r\n  scan(argv.a)\r\n    .then(result => console.log(JSON.stringify(result)));\r\n} else {\r\n  scan(argv.a)\r\n    .then(result => console.log(prettyjson.render(result)));\r\n\r\n\r\n  var fonts = new Font({\r\n    'text': 'signal-arr', //text to be converted\r\n    'font': 'block', //define the font face\r\n    'colors': '', //define all colors\r\n    'background': 'Black', //define the background color\r\n    'letterSpacing': 1, //define letter spacing\r\n    'space': true, //define if the output text should have empty lines on top and on the bottom\r\n    'maxLength': '10' //define how many character can be on one line\r\n  });\r\n}\r\n"]}