{"version":3,"sources":["../src/HubScanner.js"],"names":[],"mappings":";;;;;;;;oBAAiB,MAAM;;;;AAEhB,IAAM,OAAO,GAAG,kBAAK,IAAI,CAAC,YAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2E3C,CAAC,CAAC;;;AAEI,IAAM,IAAI,GAAG,SAAP,IAAI,CAAI,IAAI;WAAK,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AAC7D,eAAO,CAAC,IAAI,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAC/B,gBAAG,KAAK,EAAC;AACP,uBAAO,MAAM,CAAC,KAAK,CAAC,CAAC;aACtB;AACD,mBAAO,CAAC,MAAM,CAAC,CAAC;SACjB,CAAC,CAAC;KACJ,CAAC;CAAA,CAAC","file":"HubScanner.js","sourcesContent":["import edge from 'edge';\n\nexport const reflect = edge.func(function() {/*\n#r \"System.Reflection.dll\"\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\n\npublic class Method\n{\n    public string Name { get; set; }\n    public string[] Arguments { get; set; }\n}\n\npublic class Hub\n{\n    public string Name { get; set; }\n    public Method[] Server { get; set; }\n    public Method[] Client { get; set; }\n}\n\npublic class Startup\n{\n    static bool IsDerivedOfGenericType(Type type, Type genericType)\n    {\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == genericType)\n            return true;\n        return type.BaseType != null && IsDerivedOfGenericType(type.BaseType, genericType);\n    }\n\n    public async Task<object> Invoke(object input)\n    {\n                var extension = \".\" + input.ToString().Split(new[] { '.' }).Last();\n        if (string.IsNullOrEmpty(extension))\n            extension = \".dll\";\n        AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += (sender, args) =>\n        {\n            try\n            {\n                return Assembly.ReflectionOnlyLoad(args.Name);\n            }\n            catch\n            {\n                try\n                {\n                    var path = Path.Combine(Path.GetDirectoryName(input.ToString()) ?? \"\", args.Name.Split(new[] { ',' })[0] + extension);\n                    return Assembly.ReflectionOnlyLoadFrom(path);\n                }\n                catch\n                {\n                    return null;\n                }\n            }\n        };\n\n        var ass = Assembly.ReflectionOnlyLoadFrom(input.ToString());\n        var hubType = Type.ReflectionOnlyGetType(\"Microsoft.AspNet.SignalR.Hub, Microsoft.AspNet.SignalR.Core\", true, true);\n        var hubGenericType = Type.ReflectionOnlyGetType(\"Microsoft.AspNet.SignalR.Hub`1, Microsoft.AspNet.SignalR.Core\", false, true);\n        return ass.DefinedTypes.Where(x => IsDerivedOfGenericType(x, hubGenericType)).Select(x => new Hub\n        {\n            Name = x.Name,\n            Server = x.DeclaredMethods.Where(y => y.IsPublic && !y.IsStatic && y.GetBaseDefinition() == y).Select(y => new Method\n            {\n                Name = y.Name,\n                Arguments = y.GetParameters().Select(z => z.Name).ToArray()\n            }).ToArray(),\n            Client = x.BaseType.GenericTypeArguments.First().GetTypeInfo().DeclaredMethods.Where(y => y.IsPublic && !y.IsStatic && y.GetBaseDefinition() == y).Select(y => new Method\n            {\n                Name = y.Name,\n                Arguments = y.GetParameters().Select(z => z.Name).ToArray()\n            }).ToArray()\n        }).ToArray();\n    }\n}\n*/\n});\n\nexport const scan = (args) => new Promise((resolve, reject) => {\n  reflect(args, (error, result) => {\n    if(error){\n      return reject(error);\n    }\n    resolve(result);\n  });\n});"]}