{"version":3,"sources":["../src/HubScanner.js"],"names":[],"mappings":";;;;;;;;oBAAiB,MAAM;;;;AAEhB,IAAM,OAAO,GAAG,kBAAK,IAAI,CAAC,YAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2E3C,CAAC,CAAC;;;AAEI,IAAM,IAAI,GAAG,SAAP,IAAI,CAAI,IAAI;WAAK,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AAC7D,eAAO,CAAC,IAAI,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAC/B,gBAAG,KAAK,EAAC;AACP,uBAAO,MAAM,CAAC,KAAK,CAAC,CAAC;aACtB;AACD,mBAAO,CAAC,MAAM,CAAC,CAAC;SACjB,CAAC,CAAC;KACJ,CAAC;CAAA,CAAC","file":"HubScanner.js","sourcesContent":["import edge from 'edge';\r\n\r\nexport const reflect = edge.func(function() {/*\r\n#r \"System.Reflection.dll\"\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Threading.Tasks;\r\n\r\npublic class Method\r\n{\r\n    public string Name { get; set; }\r\n    public string[] Arguments { get; set; }\r\n}\r\n\r\npublic class Hub\r\n{\r\n    public string Name { get; set; }\r\n    public Method[] Server { get; set; }\r\n    public Method[] Client { get; set; }\r\n}\r\n\r\npublic class Startup\r\n{\r\n    static bool IsDerivedOfGenericType(Type type, Type genericType)\r\n    {\r\n        if (type.IsGenericType && type.GetGenericTypeDefinition() == genericType)\r\n            return true;\r\n        return type.BaseType != null && IsDerivedOfGenericType(type.BaseType, genericType);\r\n    }\r\n\r\n    public async Task<object> Invoke(object input)\r\n    {\r\n                var extension = \".\" + input.ToString().Split(new[] { '.' }).Last();\r\n        if (string.IsNullOrEmpty(extension))\r\n            extension = \".dll\";\r\n        AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += (sender, args) =>\r\n        {\r\n            try\r\n            {\r\n                return Assembly.ReflectionOnlyLoad(args.Name);\r\n            }\r\n            catch\r\n            {\r\n                try\r\n                {\r\n                    var path = Path.Combine(Path.GetDirectoryName(input.ToString()) ?? \"\", args.Name.Split(new[] { ',' })[0] + extension);\r\n                    return Assembly.ReflectionOnlyLoadFrom(path);\r\n                }\r\n                catch\r\n                {\r\n                    return null;\r\n                }\r\n            }\r\n        };\r\n\r\n        var ass = Assembly.ReflectionOnlyLoadFrom(input.ToString());\r\n        var hubType = Type.ReflectionOnlyGetType(\"Microsoft.AspNet.SignalR.Hub, Microsoft.AspNet.SignalR.Core\", true, true);\r\n        var hubGenericType = Type.ReflectionOnlyGetType(\"Microsoft.AspNet.SignalR.Hub`1, Microsoft.AspNet.SignalR.Core\", false, true);\r\n        return ass.DefinedTypes.Where(x => IsDerivedOfGenericType(x, hubGenericType)).Select(x => new Hub\r\n        {\r\n            Name = x.Name,\r\n            Server = x.DeclaredMethods.Where(y => y.IsPublic && !y.IsStatic && y.GetBaseDefinition() == y).Select(y => new Method\r\n            {\r\n                Name = y.Name,\r\n                Arguments = y.GetParameters().Select(z => z.Name).ToArray()\r\n            }).ToArray(),\r\n            Client = x.BaseType.GenericTypeArguments.First().GetTypeInfo().DeclaredMethods.Where(y => y.IsPublic && !y.IsStatic && y.GetBaseDefinition() == y).Select(y => new Method\r\n            {\r\n                Name = y.Name,\r\n                Arguments = y.GetParameters().Select(z => z.Name).ToArray()\r\n            }).ToArray()\r\n        }).ToArray();\r\n    }\r\n}\r\n*/\r\n});\r\n\r\nexport const scan = (args) => new Promise((resolve, reject) => {\r\n  reflect(args, (error, result) => {\r\n    if(error){\r\n      return reject(error);\r\n    }\r\n    resolve(result);\r\n  });\r\n});"]}